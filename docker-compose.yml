version: '3.8'

services:
  # Database Tier
  database:
    image: postgres:15-alpine
    container_name: islamic-app-db
    restart: always
    environment:
      POSTGRES_DB: islamic_app
      POSTGRES_USER: islamic_user
      POSTGRES_PASSWORD: islamic_pass123
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - islamic-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U islamic_user -d islamic_app"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Tier
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: islamic-app-backend
    restart: always
    environment:
      FLASK_ENV: production
      DATABASE_URL: postgresql://islamic_user:islamic_pass123@database:5432/islamic_app
      SECRET_KEY: your-super-secret-key-change-in-production
      JWT_SECRET_KEY: your-jwt-secret-key-change-in-production
      CORS_ORIGINS: http://localhost:3000,http://frontend:3000,http://localhost:8090
    ports:
      - "5000:5000"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - islamic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Tier
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: islamic-app-frontend
    restart: always
    environment:
      REACT_APP_API_URL: http://localhost:8090/api
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - islamic-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: islamic-app-nginx
    restart: always
    ports:
      - "8090:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - backend
    networks:
      - islamic-network

  # SonarQube Database
  sonarqube-db:
    image: postgres:13
    container_name: sonarqube-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar123
      POSTGRES_DB: sonar
    volumes:
      - sonar_postgres_data:/var/lib/postgresql/data
    networks:
      - islamic-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sonar"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SonarQube
  sonarqube:
    image: sonarqube:9.9-community
    container_name: sonarqube
    restart: unless-stopped
    depends_on:
      - sonarqube-db
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonarqube-db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar123
      SONAR_WEB_HOST: 0.0.0.0
      SONAR_WEB_PORT: 9000
      SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: true
    ports:
      - "9000:9000"
    volumes:
      - sonar_data:/opt/sonarqube/data
      - sonar_logs:/opt/sonarqube/logs
      - sonar_extensions:/opt/sonarqube/extensions
    networks:
      - islamic-network
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/api/system/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  islamic-network:
    driver: bridge

volumes:
  postgres_data:
  sonar_postgres_data:
  sonar_data:
  sonar_logs:
  sonar_extensions: